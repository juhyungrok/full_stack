{"version":3,"file":"static/js/235.9b307db9.chunk.js","mappings":"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","sources":["pages/admin/ProductTable.js","services/NotificationComponent.js","services/NotificationManager.js","services/websocketService.js","pages/admin/AdminLayout.js","pages/admin/AdminPage.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst ProductTableContainer = styled.div`\n  width: 100%;\n`;\n\nconst ProductTableElement = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 18px;\n`;\n\nconst TableHeader = styled.th`\n  background-color: #f8f9fa;\n  padding: 20px;\n  text-align: left;\n  cursor: pointer; /* Add cursor pointer to indicate sortable columns */\n`;\n\nconst TableData = styled.td`\n  padding: 20px;\n  border-bottom: 1px solid #dee2e6;\n  cursor: pointer;\n`;\n\nconst ActionButton = styled.button`\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: ${(props) => (props.danger ? \"#dc3545\" : \"#007bff\")};\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: 10px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: black;\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst ProductTable = ({\n  orders,\n  currentPage,\n  itemsPerPage,\n  handleEditOrder,\n  handleDeleteOrder,\n  handleSort,\n  sortOrder,\n}) => {\n  const paginatedOrders = orders.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  return (\n    <ProductTableContainer>\n      <ProductTableElement>\n        <thead>\n          <tr>\n            <TableHeader onClick={handleSort}>\n              Order Date {sortOrder === \"asc\" ? \"▲\" : \"▼\"}\n            </TableHeader>\n            <TableHeader>Order ID</TableHeader>\n            <TableHeader>Order Number</TableHeader>\n            <TableHeader></TableHeader>\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedOrders.map((order) => (\n            <tr key={order.orderId}>\n              <StyledLink\n                to={`/admin/${order.orderId}`}\n                style={{ display: \"contents\" }}\n              >\n                <TableData>{order.orderDatetime}</TableData>\n                <TableData>{order.orderId}</TableData>\n                <TableData>{order.orderNumber}</TableData>\n              </StyledLink>\n              <TableData>\n                <ActionButton\n                  danger\n                  onClick={() => handleDeleteOrder(order.orderId)}\n                >\n                  삭제\n                </ActionButton>\n              </TableData>\n            </tr>\n          ))}\n        </tbody>\n      </ProductTableElement>\n    </ProductTableContainer>\n  );\n};\n\nexport default ProductTable;\n","// src/components/NotificationComponent.js\nimport React, { useEffect } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n`;\n\nconst NotificationWrapper = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 1000;\n`;\n\nconst NotificationItem = styled.div`\n  background-color: #4caf50;\n  color: white;\n  padding: 15px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  animation: ${(props) => (props.fadeOut ? fadeOut : fadeIn)} 1s forwards;\n`;\n\nconst NotificationComponent = ({ message, onDismiss }) => {\n  useEffect(() => {\n    const timer = setTimeout(onDismiss, 5000); // 5초 후에 알림 사라짐\n    return () => clearTimeout(timer);\n  }, [onDismiss]);\n\n  return (\n    <NotificationWrapper>\n      <NotificationItem fadeOut={false}>{message}</NotificationItem>\n    </NotificationWrapper>\n  );\n};\n\nexport default NotificationComponent;\n","// src/components/NotificationManager.js\nimport React, { useState, useEffect } from \"react\";\nimport NotificationComponent from \"./NotificationComponent\";\n\nlet addNotificationHandler = null;\n\nconst NotificationManager = () => {\n  const [notifications, setNotifications] = useState([]);\n\n  useEffect(() => {\n    addNotificationHandler = addNotification;\n  }, [notifications]);\n\n  const addNotification = (message) => {\n    const id = new Date().getTime();\n    setNotifications((prevNotifications) => [\n      ...prevNotifications,\n      { id, message },\n    ]);\n\n    // 페이지 새로고침\n    setTimeout(() => {\n      window.location.reload();\n    }, 2000); // 3초 후 새로고침\n  };\n\n  const removeNotification = (id) => {\n    setNotifications((prevNotifications) =>\n      prevNotifications.filter((notification) => notification.id !== id)\n    );\n  };\n\n  return (\n    <div>\n      {notifications.map((notification) => (\n        <NotificationComponent\n          key={notification.id}\n          message={notification.message}\n          onDismiss={() => removeNotification(notification.id)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport const addNotification = (message) => {\n  if (addNotificationHandler) {\n    addNotificationHandler(message);\n  }\n};\n\nexport default NotificationManager;\n","// src/services/websocketService.js\nimport SockJS from \"sockjs-client\";\nimport { Stomp } from \"@stomp/stompjs\";\nimport { addNotification } from \"./NotificationManager\";\n\nlet stompClient = null;\n\nexport const connect = () => {\n  const socket = new SockJS(`${process.env.REACT_APP_BACKEND}/ws`);\n  stompClient = Stomp.over(socket);\n\n  stompClient.connect(\n    {},\n    () => {\n      console.log(\"Connected to WebSocket\");\n      stompClient.subscribe(\"/topic/notifications\", (message) => {\n        const parsedMessage = JSON.parse(message.body);\n        addNotification(parsedMessage.message);\n      });\n    },\n    (error) => {\n      console.error(\"WebSocket connection error:\", error);\n    }\n  );\n};\n\nexport const disconnect = () => {\n  if (stompClient !== null) {\n    stompClient.disconnect();\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ProductTable from \"./ProductTable\";\nimport { allOrderinfo } from \"../../api/index.js\";\nimport { connect, disconnect } from \"../../services/websocketService.js\";\nimport NotificationManager, {\n  addNotification,\n} from \"../../services/NotificationManager.js\";\n\nconst AdminContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 40px;\n`;\n\nconst Title = styled.h1`\n  font-size: 36px;\n  margin-bottom: 40px;\n`;\n\nconst TopSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst DateSection = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst DateDropdown = styled.div`\n  position: relative;\n  display: inline-block;\n  margin-right: 10px;\n`;\n\nconst DateDropdownButton = styled.button`\n  padding: 5px 10px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: white;\n  cursor: pointer;\n`;\n\nconst DateDropdownContent = styled.div`\n  display: ${({ isOpen }) => (isOpen ? \"block\" : \"none\")};\n  position: absolute;\n  background-color: white;\n  min-width: 100px;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n`;\n\nconst DateDropdownItem = styled.div`\n  padding: 5px 10px;\n  cursor: pointer;\n  &:hover {\n    background-color: #f1f1f1;\n  }\n`;\n\nconst SearchButton = styled.button`\n  padding: 5px 10px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: white;\n  cursor: pointer;\n`;\n\nconst SalesComparisonButton = styled.button`\n  padding: 10px 20px;\n  font-size: 16px;\n  border: none;\n  border-radius: 4px;\n  background-color: #007bff;\n  color: white;\n  cursor: pointer;\n`;\n\nconst ItemsPerPageSection = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst ItemsPerPageLabel = styled.label`\n  margin-right: 10px;\n  font-size: 16px;\n`;\n\nconst ItemsPerPageSelect = styled.select`\n  padding: 5px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`;\n\nconst PaginationContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 20px;\n`;\n\nconst PageButton = styled.button`\n  padding: 8px 16px;\n  font-size: 14px;\n  background-color: ${(props) =>\n    props.active === \"true\" ? \"#007bff\" : \"#fff\"};\n  color: ${(props) => (props.active === \"true\" ? \"#fff\" : \"#007bff\")};\n  border: 1px solid #007bff;\n  border-radius: 4px;\n  cursor: pointer;\n  margin: 0 5px;\n`;\n\nconst ArrowButton = styled.button`\n  padding: 8px 16px;\n  font-size: 14px;\n  background-color: #fff;\n  color: #007bff;\n  border: 1px solid #007bff;\n  border-radius: 4px;\n  cursor: pointer;\n  margin: 0 5px;\n`;\n\nconst NoOrdersMessage = styled.p`\n  text-align: center;\n  font-size: 18px;\n  margin-top: 20px;\n`;\n\nconst AdminLayout = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedYear, setSelectedYear] = useState(\"\");\n  const [selectedMonth, setSelectedMonth] = useState(\"\");\n  const [selectedDay, setSelectedDay] = useState(\"\");\n  const [isYearOpen, setIsYearOpen] = useState(false);\n  const [isMonthOpen, setIsMonthOpen] = useState(false);\n  const [isDayOpen, setIsDayOpen] = useState(false);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const [orders, setOrders] = useState([]);\n  const [filteredOrders, setFilteredOrders] = useState([]);\n  const [sortOrder, setSortOrder] = useState(\"asc\"); // 정렬 상태 추가\n\n  useEffect(() => {\n    const today = new Date();\n    setSelectedYear(today.getFullYear());\n    setSelectedMonth(today.getMonth() + 1);\n    setSelectedDay(today.getDate());\n    fetchOrders(today.getFullYear(), today.getMonth() + 1, today.getDate());\n    connect();\n\n    return () => disconnect();\n  }, []);\n\n  const renderPagination = () => {\n    const pageNumbers = [];\n    const maxPageNumbers = 5; // 최대 5개의 페이지 번호 표시\n    const totalPages = Math.ceil(filteredOrders.length / itemsPerPage);\n\n    if (totalPages <= maxPageNumbers) {\n      // 전체 페이지 수가 5 이하인 경우\n      for (let i = 1; i <= totalPages; i++) {\n        pageNumbers.push(i);\n      }\n    } else {\n      // 전체 페이지 수가 6 이상인 경우\n      const startPage = Math.max(\n        1,\n        currentPage - Math.floor(maxPageNumbers / 2)\n      );\n      const endPage = Math.min(totalPages, startPage + maxPageNumbers - 1);\n\n      if (startPage > 1) {\n        pageNumbers.push(1); // 첫 번째 페이지 번호 추가\n        if (startPage > 2) {\n          pageNumbers.push(-1); // 이전 페이지 화살표 추가\n        }\n      }\n\n      for (let i = startPage; i <= endPage; i++) {\n        pageNumbers.push(i);\n      }\n\n      if (endPage < totalPages) {\n        if (endPage < totalPages - 1) {\n          pageNumbers.push(-2); // 다음 페이지 화살표 추가\n        }\n        pageNumbers.push(totalPages); // 마지막 페이지 번호 추가\n      }\n    }\n\n    return pageNumbers.map((page) => {\n      if (page === -1) {\n        return (\n          <ArrowButton\n            key=\"prev\"\n            onClick={() => handlePageChange(currentPage - 1)}\n          >\n            &lt;\n          </ArrowButton>\n        );\n      } else if (page === -2) {\n        return (\n          <ArrowButton\n            key=\"next\"\n            onClick={() => handlePageChange(currentPage + 1)}\n          >\n            &gt;\n          </ArrowButton>\n        );\n      } else {\n        return (\n          <PageButton\n            key={page}\n            active={(page === currentPage).toString()}\n            onClick={() => handlePageChange(page)}\n          >\n            {page}\n          </PageButton>\n        );\n      }\n    });\n  };\n\n  const fetchOrders = async (year, month, day) => {\n    try {\n      const orders = await allOrderinfo();\n      const filteredData = orders.filter((order) => {\n        const orderDate = new Date(order.orderDatetime);\n        return (\n          orderDate.getFullYear() === year &&\n          orderDate.getMonth() + 1 === month &&\n          orderDate.getDate() === day\n        );\n      });\n      setOrders(orders);\n      setFilteredOrders(filteredData);\n    } catch (error) {\n      console.error(\"Failed to fetch orders:\", error);\n    }\n  };\n\n  const handlePageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  const handleYearClick = () => {\n    setIsYearOpen(!isYearOpen);\n    setIsMonthOpen(false);\n    setIsDayOpen(false);\n  };\n\n  const handleMonthClick = () => {\n    setIsMonthOpen(!isMonthOpen);\n    setIsYearOpen(false);\n    setIsDayOpen(false);\n  };\n\n  const handleDayClick = () => {\n    setIsDayOpen(!isDayOpen);\n    setIsYearOpen(false);\n    setIsMonthOpen(false);\n  };\n\n  const handleYearSelect = (year) => {\n    setSelectedYear(year);\n    setIsYearOpen(false);\n  };\n\n  const handleMonthSelect = (month) => {\n    setSelectedMonth(month);\n    setIsMonthOpen(false);\n    setSelectedDay(\"\"); // Reset day selection when month changes\n  };\n\n  const handleDaySelect = (day) => {\n    setSelectedDay(day);\n    setIsDayOpen(false);\n  };\n\n  const handleSearch = () => {\n    fetchOrders(selectedYear, selectedMonth, selectedDay);\n  };\n\n  const handleSalesComparison = () => {\n    console.log(\"Sales Comparison clicked\");\n  };\n\n  const handleItemsPerPageChange = (event) => {\n    setItemsPerPage(parseInt(event.target.value));\n    setCurrentPage(1);\n  };\n\n  const handleSort = () => {\n    const sortedOrders = [...filteredOrders].sort((a, b) => {\n      if (sortOrder === \"asc\") {\n        return new Date(a.orderDatetime) - new Date(b.orderDatetime);\n      } else {\n        return new Date(b.orderDatetime) - new Date(a.orderDatetime);\n      }\n    });\n    setFilteredOrders(sortedOrders);\n    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n  };\n\n  const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();\n\n  return (\n    <AdminContainer>\n      <Title>관리자 페이지</Title>\n      <NotificationManager />\n      <TopSection>\n        <DateSection>\n          <DateDropdown>\n            <DateDropdownButton onClick={handleYearClick}>\n              {selectedYear || \"Year\"}\n            </DateDropdownButton>\n            <DateDropdownContent isOpen={isYearOpen}>\n              {Array.from({ length: 30 }, (_, index) => (\n                <DateDropdownItem\n                  key={index}\n                  onClick={() => handleYearSelect(2021 + index)}\n                >\n                  {2021 + index}\n                </DateDropdownItem>\n              ))}\n            </DateDropdownContent>\n          </DateDropdown>\n          <DateDropdown>\n            <DateDropdownButton onClick={handleMonthClick}>\n              {selectedMonth || \"Month\"}\n            </DateDropdownButton>\n            <DateDropdownContent isOpen={isMonthOpen}>\n              {Array.from({ length: 12 }, (_, index) => (\n                <DateDropdownItem\n                  key={index}\n                  onClick={() => handleMonthSelect(index + 1)}\n                >\n                  {index + 1}\n                </DateDropdownItem>\n              ))}\n            </DateDropdownContent>\n          </DateDropdown>\n          <DateDropdown>\n            <DateDropdownButton onClick={handleDayClick}>\n              {selectedDay || \"Day\"}\n            </DateDropdownButton>\n            <DateDropdownContent isOpen={isDayOpen}>\n              {Array.from({ length: daysInMonth }, (_, index) => (\n                <DateDropdownItem\n                  key={index}\n                  onClick={() => handleDaySelect(index + 1)}\n                >\n                  {index + 1}\n                </DateDropdownItem>\n              ))}\n            </DateDropdownContent>\n          </DateDropdown>\n          <SearchButton onClick={handleSearch}>Search</SearchButton>\n        </DateSection>\n        <ItemsPerPageSection>\n          <ItemsPerPageLabel>보여질 항목 수:</ItemsPerPageLabel>\n          <ItemsPerPageSelect\n            value={itemsPerPage}\n            onChange={handleItemsPerPageChange}\n          >\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </ItemsPerPageSelect>\n        </ItemsPerPageSection>\n        <SalesComparisonButton onClick={handleSalesComparison}>\n          매출 비교(error)\n        </SalesComparisonButton>\n      </TopSection>\n\n      <ProductTable\n        orders={filteredOrders}\n        currentPage={currentPage}\n        itemsPerPage={itemsPerPage}\n        handleEditOrder={(id) => console.log(`Edit order ${id}`)}\n        handleDeleteOrder={(id) => console.log(`Delete order ${id}`)}\n        handleSort={handleSort}\n        sortOrder={sortOrder}\n      />\n      <PaginationContainer>{renderPagination()}</PaginationContainer>\n\n      {filteredOrders.length === 0 && (\n        <NoOrdersMessage>주문 내역이 없습니다.</NoOrdersMessage>\n      )}\n    </AdminContainer>\n  );\n};\n\nexport default AdminLayout;\n","import React from \"react\";\nimport AdminLayout from \"./AdminLayout\";\n\nconst AdminPage = () => {\n  return <AdminLayout />;\n};\n\nexport default AdminPage;\n"],"names":["ProductTableContainer","styled","div","_templateObject","_taggedTemplateLiteral","ProductTableElement","table","_templateObject2","TableHeader","th","_templateObject3","TableData","td","_templateObject4","ActionButton","button","_templateObject5","props","danger","StyledLink","Link","_templateObject6","_ref","orders","currentPage","itemsPerPage","handleEditOrder","handleDeleteOrder","handleSort","sortOrder","paginatedOrders","slice","_jsx","children","_jsxs","onClick","map","order","to","concat","orderId","style","display","orderDatetime","orderNumber","fadeIn","keyframes","fadeOut","NotificationWrapper","NotificationItem","message","onDismiss","useEffect","timer","setTimeout","clearTimeout","addNotificationHandler","NotificationManager","notifications","setNotifications","useState","addNotification","id","Date","getTime","prevNotifications","window","location","reload","notification","NotificationComponent","removeNotification","filter","stompClient","connect","socket","SockJS","process","Stomp","over","console","log","subscribe","JSON","parse","body","error","AdminContainer","Title","h1","TopSection","DateSection","DateDropdown","DateDropdownButton","DateDropdownContent","_templateObject7","isOpen","DateDropdownItem","_templateObject8","SearchButton","_templateObject9","SalesComparisonButton","_templateObject10","ItemsPerPageSection","_templateObject11","ItemsPerPageLabel","label","_templateObject12","ItemsPerPageSelect","select","_templateObject13","PaginationContainer","_templateObject14","PageButton","_templateObject15","active","ArrowButton","_templateObject16","NoOrdersMessage","p","_templateObject17","AdminLayout","setCurrentPage","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","selectedDay","setSelectedDay","isYearOpen","setIsYearOpen","isMonthOpen","setIsMonthOpen","isDayOpen","setIsDayOpen","setItemsPerPage","setOrders","filteredOrders","setFilteredOrders","setSortOrder","today","getFullYear","getMonth","getDate","fetchOrders","disconnect","async","year","month","day","allOrderinfo","filteredData","orderDate","handlePageChange","pageNumber","daysInMonth","handleYearClick","Array","from","length","_","index","handleMonthClick","handleDayClick","handleSearch","value","onChange","event","parseInt","target","handleSalesComparison","ProductTable","sortedOrders","sort","a","b","renderPagination","pageNumbers","totalPages","Math","ceil","i","push","startPage","max","floor","maxPageNumbers","endPage","min","page","toString","AdminPage"],"sourceRoot":""}