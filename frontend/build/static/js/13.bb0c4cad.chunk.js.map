{"version":3,"file":"static/js/13.bb0c4cad.chunk.js","mappings":"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","sources":["pages/admin/ProductTable.js","pages/admin/AdminLayout.js","pages/admin/AdminPage.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst ProductTableContainer = styled.div`\n  width: 100%;\n`;\n\nconst ProductTableElement = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 18px;\n`;\n\nconst TableHeader = styled.th`\n  background-color: #f8f9fa;\n  padding: 20px;\n  text-align: left;\n`;\n\nconst TableData = styled.td`\n  padding: 20px;\n  border-bottom: 1px solid #dee2e6;\n  cursor: pointer;\n`;\n\nconst ActionButton = styled.button`\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: ${(props) => (props.danger ? \"#dc3545\" : \"#007bff\")};\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: 10px;\n`;\n\nconst ProductTable = ({\n  orders,\n  currentPage,\n  itemsPerPage,\n  handleEditOrder,\n  handleDeleteOrder,\n}) => {\n  const paginatedOrders = orders.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  return (\n    <ProductTableContainer>\n      <ProductTableElement>\n        <thead>\n          <tr>\n            <TableHeader>Order ID</TableHeader>\n            <TableHeader>Order Number</TableHeader>\n            <TableHeader>Order Date</TableHeader>\n            <TableHeader></TableHeader>\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedOrders.map((order) => (\n            <tr key={order.orderId}>\n              <Link\n                to={`/admin/${order.orderId}`}\n                style={{ display: \"contents\" }}\n              >\n                <TableData>{order.orderId}</TableData>\n                <TableData>{order.orderNumber}</TableData>\n                <TableData>{order.orderDatetime}</TableData>\n              </Link>\n              <TableData>\n                {/* <ActionButton onClick={() => handleEditOrder(order.orderId)}>\n                  Edit\n                </ActionButton> */}\n                <ActionButton\n                  danger\n                  onClick={() => handleDeleteOrder(order.orderId)}\n                >\n                  삭제\n                </ActionButton>\n              </TableData>\n            </tr>\n          ))}\n        </tbody>\n      </ProductTableElement>\n    </ProductTableContainer>\n  );\n};\n\nexport default ProductTable;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ProductTable from \"./ProductTable\";\nimport { allOrderinfo } from \"../../api/index.js\";\n\nconst AdminContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 40px;\n`;\n\nconst Title = styled.h1`\n  font-size: 36px;\n  margin-bottom: 40px;\n`;\n\nconst TopSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst DateSection = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst DateDropdown = styled.div`\n  position: relative;\n  display: inline-block;\n  margin-right: 10px;\n`;\n\nconst DateDropdownButton = styled.button`\n  padding: 5px 10px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: white;\n  cursor: pointer;\n`;\n\nconst DateDropdownContent = styled.div`\n  display: ${({ isOpen }) => (isOpen ? \"block\" : \"none\")};\n  position: absolute;\n  background-color: white;\n  min-width: 100px;\n  max-height: 200px;\n  overflow-y: auto;\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n`;\n\nconst DateDropdownItem = styled.div`\n  padding: 5px 10px;\n  cursor: pointer;\n  &:hover {\n    background-color: #f1f1f1;\n  }\n`;\n\nconst SearchButton = styled.button`\n  padding: 5px 10px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: white;\n  cursor: pointer;\n`;\n\nconst SalesComparisonButton = styled.button`\n  padding: 10px 20px;\n  font-size: 16px;\n  border: none;\n  border-radius: 4px;\n  background-color: #007bff;\n  color: white;\n  cursor: pointer;\n`;\n\nconst ItemsPerPageSection = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst ItemsPerPageLabel = styled.label`\n  margin-right: 10px;\n  font-size: 16px;\n`;\n\nconst ItemsPerPageSelect = styled.select`\n  padding: 5px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`;\n\nconst PaginationContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 20px;\n`;\n\nconst PageButton = styled.button`\n  padding: 8px 16px;\n  font-size: 14px;\n  background-color: ${(props) =>\n    props.active === \"true\" ? \"#007bff\" : \"#fff\"};\n  color: ${(props) => (props.active === \"true\" ? \"#fff\" : \"#007bff\")};\n  border: 1px solid #007bff;\n  border-radius: 4px;\n  cursor: pointer;\n  margin: 0 5px;\n`;\nconst ArrowButton = styled.button`\n  padding: 8px 16px;\n  font-size: 14px;\n  background-color: #fff;\n  color: #007bff;\n  border: 1px solid #007bff;\n  border-radius: 4px;\n  cursor: pointer;\n  margin: 0 5px;\n`;\nconst NoOrdersMessage = styled.p`\n  text-align: center;\n  font-size: 18px;\n  margin-top: 20px;\n`;\n\nconst AdminLayout = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedYear, setSelectedYear] = useState(\"\");\n  const [selectedMonth, setSelectedMonth] = useState(\"\");\n  const [selectedDay, setSelectedDay] = useState(\"\");\n  const [isYearOpen, setIsYearOpen] = useState(false);\n  const [isMonthOpen, setIsMonthOpen] = useState(false);\n  const [isDayOpen, setIsDayOpen] = useState(false);\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const [orders, setOrders] = useState([]);\n  const [filteredOrders, setFilteredOrders] = useState([]);\n\n  useEffect(() => {\n    const today = new Date();\n    setSelectedYear(today.getFullYear());\n    setSelectedMonth(today.getMonth() + 1);\n    setSelectedDay(today.getDate());\n    fetchOrders(today.getFullYear(), today.getMonth() + 1, today.getDate());\n  }, []);\n\n  const renderPagination = () => {\n    const pageNumbers = [];\n    const maxPageNumbers = 5; // 최대 5개의 페이지 번호 표시\n    const totalPages = Math.ceil(filteredOrders.length / itemsPerPage);\n\n    if (totalPages <= maxPageNumbers) {\n      // 전체 페이지 수가 5 이하인 경우\n      for (let i = 1; i <= totalPages; i++) {\n        pageNumbers.push(i);\n      }\n    } else {\n      // 전체 페이지 수가 6 이상인 경우\n      const startPage = Math.max(\n        1,\n        currentPage - Math.floor(maxPageNumbers / 2)\n      );\n      const endPage = Math.min(totalPages, startPage + maxPageNumbers - 1);\n\n      if (startPage > 1) {\n        pageNumbers.push(1); // 첫 번째 페이지 번호 추가\n        if (startPage > 2) {\n          pageNumbers.push(-1); // 이전 페이지 화살표 추가\n        }\n      }\n\n      for (let i = startPage; i <= endPage; i++) {\n        pageNumbers.push(i);\n      }\n\n      if (endPage < totalPages) {\n        if (endPage < totalPages - 1) {\n          pageNumbers.push(-2); // 다음 페이지 화살표 추가\n        }\n        pageNumbers.push(totalPages); // 마지막 페이지 번호 추가\n      }\n    }\n\n    return pageNumbers.map((page) => {\n      if (page === -1) {\n        return (\n          <ArrowButton\n            key=\"prev\"\n            onClick={() => handlePageChange(currentPage - 1)}\n          >\n            &lt;\n          </ArrowButton>\n        );\n      } else if (page === -2) {\n        return (\n          <ArrowButton\n            key=\"next\"\n            onClick={() => handlePageChange(currentPage + 1)}\n          >\n            &gt;\n          </ArrowButton>\n        );\n      } else {\n        return (\n          <PageButton\n            key={page}\n            active={(page === currentPage).toString()}\n            onClick={() => handlePageChange(page)}\n          >\n            {page}\n          </PageButton>\n        );\n      }\n    });\n  };\n  const fetchOrders = async (year, month, day) => {\n    try {\n      const orders = await allOrderinfo();\n      const filteredData = orders.filter((order) => {\n        const orderDate = new Date(order.orderDatetime);\n        return (\n          orderDate.getFullYear() === year &&\n          orderDate.getMonth() + 1 === month &&\n          orderDate.getDate() === day\n        );\n      });\n      setOrders(orders);\n      setFilteredOrders(filteredData);\n    } catch (error) {\n      console.error(\"Failed to fetch orders:\", error);\n    }\n  };\n\n  const handlePageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  const handleYearClick = () => {\n    setIsYearOpen(!isYearOpen);\n    setIsMonthOpen(false);\n    setIsDayOpen(false);\n  };\n\n  const handleMonthClick = () => {\n    setIsMonthOpen(!isMonthOpen);\n    setIsYearOpen(false);\n    setIsDayOpen(false);\n  };\n\n  const handleDayClick = () => {\n    setIsDayOpen(!isDayOpen);\n    setIsYearOpen(false);\n    setIsMonthOpen(false);\n  };\n\n  const handleYearSelect = (year) => {\n    setSelectedYear(year);\n    setIsYearOpen(false);\n  };\n\n  const handleMonthSelect = (month) => {\n    setSelectedMonth(month);\n    setIsMonthOpen(false);\n    setSelectedDay(\"\"); // Reset day selection when month changes\n  };\n\n  const handleDaySelect = (day) => {\n    setSelectedDay(day);\n    setIsDayOpen(false);\n  };\n\n  const handleSearch = () => {\n    fetchOrders(selectedYear, selectedMonth, selectedDay);\n  };\n\n  const handleSalesComparison = () => {\n    console.log(\"Sales Comparison clicked\");\n  };\n\n  const handleItemsPerPageChange = (event) => {\n    setItemsPerPage(parseInt(event.target.value));\n    setCurrentPage(1);\n  };\n\n  const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();\n\n  return (\n    <AdminContainer>\n      <Title>관리자 페이지</Title>\n      <TopSection>\n        <DateSection>\n          <DateDropdown>\n            <DateDropdownButton onClick={handleYearClick}>\n              {selectedYear || \"Year\"}\n            </DateDropdownButton>\n            <DateDropdownContent isOpen={isYearOpen}>\n              {Array.from({ length: 30 }, (_, index) => (\n                <DateDropdownItem\n                  key={index}\n                  onClick={() => handleYearSelect(2021 + index)}\n                >\n                  {2021 + index}\n                </DateDropdownItem>\n              ))}\n            </DateDropdownContent>\n          </DateDropdown>\n          <DateDropdown>\n            <DateDropdownButton onClick={handleMonthClick}>\n              {selectedMonth || \"Month\"}\n            </DateDropdownButton>\n            <DateDropdownContent isOpen={isMonthOpen}>\n              {Array.from({ length: 12 }, (_, index) => (\n                <DateDropdownItem\n                  key={index}\n                  onClick={() => handleMonthSelect(index + 1)}\n                >\n                  {index + 1}\n                </DateDropdownItem>\n              ))}\n            </DateDropdownContent>\n          </DateDropdown>\n          <DateDropdown>\n            <DateDropdownButton onClick={handleDayClick}>\n              {selectedDay || \"Day\"}\n            </DateDropdownButton>\n            <DateDropdownContent isOpen={isDayOpen}>\n              {Array.from({ length: daysInMonth }, (_, index) => (\n                <DateDropdownItem\n                  key={index}\n                  onClick={() => handleDaySelect(index + 1)}\n                >\n                  {index + 1}\n                </DateDropdownItem>\n              ))}\n            </DateDropdownContent>\n          </DateDropdown>\n          <SearchButton onClick={handleSearch}>Search</SearchButton>\n        </DateSection>\n        <ItemsPerPageSection>\n          <ItemsPerPageLabel>보여질 항목 수:</ItemsPerPageLabel>\n          <ItemsPerPageSelect\n            value={itemsPerPage}\n            onChange={handleItemsPerPageChange}\n          >\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </ItemsPerPageSelect>\n        </ItemsPerPageSection>\n        <SalesComparisonButton onClick={handleSalesComparison}>\n          매출 비교(error)\n        </SalesComparisonButton>\n      </TopSection>\n\n      {filteredOrders.length > 0 ? (\n        <>\n          <ProductTable\n            orders={filteredOrders}\n            currentPage={currentPage}\n            itemsPerPage={itemsPerPage}\n            handleEditOrder={(id) => console.log(`Edit order ${id}`)}\n            handleDeleteOrder={(id) => console.log(`Delete order ${id}`)}\n          />\n          <PaginationContainer>{renderPagination()}</PaginationContainer>\n        </>\n      ) : (\n        <NoOrdersMessage>주문 내역이 없습니다.</NoOrdersMessage>\n      )}\n    </AdminContainer>\n  );\n};\n\nexport default AdminLayout;\n","import React from \"react\";\nimport AdminLayout from \"./AdminLayout\";\n\nconst AdminPage = () => {\n  return <AdminLayout />;\n};\n\nexport default AdminPage;\n"],"names":["ProductTableContainer","styled","div","_templateObject","_taggedTemplateLiteral","ProductTableElement","table","_templateObject2","TableHeader","th","_templateObject3","TableData","td","_templateObject4","ActionButton","button","_templateObject5","props","danger","_ref","orders","currentPage","itemsPerPage","handleEditOrder","handleDeleteOrder","paginatedOrders","slice","_jsx","children","_jsxs","map","order","Link","to","concat","orderId","style","display","orderNumber","orderDatetime","onClick","AdminContainer","Title","h1","TopSection","DateSection","DateDropdown","DateDropdownButton","_templateObject6","DateDropdownContent","_templateObject7","isOpen","DateDropdownItem","_templateObject8","SearchButton","_templateObject9","SalesComparisonButton","_templateObject10","ItemsPerPageSection","_templateObject11","ItemsPerPageLabel","label","_templateObject12","ItemsPerPageSelect","select","_templateObject13","PaginationContainer","_templateObject14","PageButton","_templateObject15","active","ArrowButton","_templateObject16","NoOrdersMessage","p","_templateObject17","AdminLayout","setCurrentPage","useState","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","selectedDay","setSelectedDay","isYearOpen","setIsYearOpen","isMonthOpen","setIsMonthOpen","isDayOpen","setIsDayOpen","setItemsPerPage","setOrders","filteredOrders","setFilteredOrders","useEffect","today","Date","getFullYear","getMonth","getDate","fetchOrders","async","year","month","day","allOrderinfo","filteredData","filter","orderDate","error","console","handlePageChange","pageNumber","daysInMonth","handleYearClick","Array","from","length","_","index","handleMonthClick","handleDayClick","handleSearch","value","onChange","event","parseInt","target","handleSalesComparison","log","_Fragment","ProductTable","id","renderPagination","pageNumbers","totalPages","Math","ceil","i","push","startPage","max","floor","maxPageNumbers","endPage","min","page","toString","AdminPage"],"sourceRoot":""}