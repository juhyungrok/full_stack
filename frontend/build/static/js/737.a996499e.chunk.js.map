{"version":3,"file":"static/js/737.a996499e.chunk.js","mappings":"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","sources":["components/cart/Header.js","components/cart/Footer.js","components/cart/CartComponent.js","components/payments/KaKaoPayment.js","components/modal/SeletedCardModal.js","toss/CheckoutPage.js","components/layout/CartLayout.js","pages/cart/CartPage.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { IoIosArrowBack } from \"react-icons/io\";\n\nconst HeaderWrapper = styled.header`\n  background-color: #fff;\n  border-bottom: 1px solid #ddd;\n  padding: 10px;\n  text-align: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 93%;\n  z-index: 100;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst HeaderTitle = styled.h1`\n  margin: 0;\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst BackButton = styled(Link)`\n  margin-left: 10px;\n  text-decoration: none;\n  color: #000;\n`;\n\nconst Header = () => {\n  return (\n    <HeaderWrapper>\n      <BackButton to=\"/\">\n        <IoIosArrowBack size={24} />\n      </BackButton>\n      <HeaderTitle>장바구니</HeaderTitle>\n      <div></div> {/* 중앙 정렬을 위한 공간 확보 */}\n    </HeaderWrapper>\n  );\n};\n\nexport default Header;\n","import styled from \"styled-components\";\n\nconst Footer = styled.footer`\n  background-color: #fff;\n  border-top: 2px solid #ddd;\n  padding: 10px;\n  text-align: center;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  width: 95%;\n  z-index: 100;\n\n  .total-amount {\n    margin-bottom: 10px;\n    font-size: 16px;\n  }\n\n  button {\n    background-color: #000;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    padding: 10px;\n    width: 100%;\n    font-size: 16px;\n    font-weight: bold;\n  }\n  @media (min-width: 768px) {\n    /* 데스크탑 화면일 때의 스타일 */\n    width: 50%;\n  }\n`;\n\nexport default Footer;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst CardContainer = styled.div`\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid #ccc;\n  padding: 10px;\n`;\n\nconst ProductImage = styled.img`\n  width: 30%;\n  height: 30%;\n  object-fit: cover;\n  margin-right: 10px;\n`;\n\nconst ProductInfo = styled.div`\n  display: flex; /* 이미지와 내용을 나란히 표시하기 위해 flex 사용 */\n  flex-direction: column;\n  flex-grow: 1; /* ProductInfo가 남은 공간을 모두 차지하도록 설정 */\n`;\n\nconst ProductName = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\nconst Price = styled.div`\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n\nconst Options = styled.div`\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n\nconst QuantityButtons = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst QuantityButton = styled.button`\n  margin: 10%; /* 버튼 사이 간격 추가 */\n  font-size: 16px;\n`;\n\nconst RemoveButton = styled.button`\n  align-self: flex-top; /* 우측 하단에 배치 */\n  background-color: #ff5a5f;\n  color: white;\n  border: none;\n  border-radius: 10px;\n  padding: 8px 16px;\n  font-size: 14px;\n  margin-top: 5px; /* 버튼 위에 간격 추가 */\n  transition: background-color 0.3s;\n  &:hover {\n    background-color: #e00007;\n  }\n`;\n\nconst CartComponent = ({ cartItems, onUpdate }) => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    const storedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    setLoading(false);\n  }, []);\n\n  const handleRemoveItem = (index) => {\n    const updatedCart = [...cartItems];\n    updatedCart.splice(index, 1);\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    onUpdate(updatedCart);\n  };\n\n  const handleIncrement = (index) => {\n    const updatedCart = [...cartItems];\n    updatedCart[index].amount += 1;\n    localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n    onUpdate(updatedCart);\n  };\n\n  const handleDecrement = (index) => {\n    const updatedCart = [...cartItems];\n    if (updatedCart[index].amount > 1) {\n      updatedCart[index].amount -= 1;\n      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n      onUpdate(updatedCart);\n    }\n  };\n\n  return (\n    <div>\n      {loading && <p>데이터를 불러오는 중입니다...</p>}\n      {!loading && cartItems.length === 0 && <p>장바구니가 비어 있습니다.</p>}\n      {!loading && cartItems.length > 0 && (\n        <ul>\n          {cartItems.map((item, index) => (\n            <CardContainer key={index}>\n              <ProductImage\n                src={item.imgUrl}\n                alt={item.name}\n                onError={(e) => {\n                  e.target.src = \"https://via.placeholder.com/150\";\n                }}\n              />\n              <ProductInfo>\n                <ProductName>{item.name}</ProductName>\n\n                <Options>\n                  {item.selectedSize && <p>사이즈: {item.selectedSize}</p>}\n                  {item.selectedTemperature && (\n                    <p>온도: {item.selectedTemperature}</p>\n                  )}\n                </Options>\n                <Price>{(item.price * item.amount).toLocaleString()}원</Price>\n                <QuantityButtons>\n                  <QuantityButton onClick={() => handleDecrement(index)}>\n                    -\n                  </QuantityButton>\n                  <span>{item.amount}</span>\n                  <QuantityButton onClick={() => handleIncrement(index)}>\n                    +\n                  </QuantityButton>\n                </QuantityButtons>\n              </ProductInfo>\n              <RemoveButton onClick={() => handleRemoveItem(index)}>\n                삭제\n              </RemoveButton>\n            </CardContainer>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default CartComponent;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport handlePayment from \"../../hooks/handlePayment\";\nimport { useNavigate } from \"react-router-dom\";\nimport kakaoimg from \"./KaKaoimg.png\";\nimport styled from \"styled-components\";\n\n// styled-components를 사용하여 스타일을 적용한 컴포넌트 생성\nconst KaKaoPaymentContainer = styled.div`\n  border: 2px solid #ccc;\n  border-radius: 8px;\n  padding: 8px;\n`;\n\nconst KaKaoPayment = ({ cartItems, totalPrice }) => {\n  const navigate = useNavigate();\n  const [orderId, setOrderId] = useState(null);\n\n  useEffect(() => {\n    const jquery = document.createElement(\"script\");\n    jquery.src = \"http://code.jquery.com/jquery-1.12.4.min.js\";\n    const iamport = document.createElement(\"script\");\n    iamport.src = \"https://cdn.iamport.kr/v1/iamport.js\";\n    document.head.appendChild(jquery);\n    document.head.appendChild(iamport);\n\n    return () => {\n      document.head.removeChild(jquery);\n      document.head.removeChild(iamport);\n    };\n  }, []);\n\n  const requestPay = async () => {\n    const IMP = window.IMP;\n    IMP.init(\"imp01477361\");\n\n    IMP.request_pay(\n      {\n        pg: \"kakaopay.TC0ONETIME\", // 카카오페이 사용 시에는 'kakaopay'로 설정\n        pay_method: \"card\",\n        merchant_uid: new Date().getTime().toString(), // 고유한 주문번호를 지정\n        name: \"키오스크\",\n        amount: totalPrice,\n        m_redirect_url: \"http://localhost:3000/success\",\n        // buyer_email: \"test@naver.com\",\n        // buyer_name: \"코드쿡\",\n        // buyer_tel: \"010-1234-5678\",\n        // buyer_addr: \"서울특별시\",\n        // buyer_postcode: \"123-456\",\n      },\n      async (rsp) => {\n        try {\n          const { data } = await axios.post(\n            \"http://localhost:8080/verifyIamport/\" + rsp.imp_uid\n          );\n\n          if (rsp.success) {\n            alert(\"결제 성공\");\n          } else {\n            alert(\"결제 실패\");\n            navigate(\"/\");\n          }\n        } catch (error) {\n          console.error(\"결제 검증 중 에러 발생:\", error);\n          alert(\"결제 실패\");\n        }\n      }\n    );\n  };\n  return (\n    <KaKaoPaymentContainer onClick={requestPay}>\n      <img src={kakaoimg} alt=\"카카오페이\" />\n    </KaKaoPaymentContainer>\n  );\n};\n\nexport default KaKaoPayment;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport KaKaoPayment from \"../payments/KaKaoPayment\";\nimport TossPayment from \"../payments/TossPayment\";\n\nconst ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ModalContent = styled.div`\n  background-color: #ffffff;\n  padding: 40px;\n  border-radius: 8px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n  position: relative;\n  text-align: center; /* 모달 창 내용 가운데 정렬 */\n  width: 400px; /* 너비 설정 */\n  height: 300px; /* 높이 설정 */\n`;\n\n// const CloseButton = styled.button`\n//   padding: 6px 12px;\n//   background-color: #ffffff;\n//   color: #333333;\n//   border: 2px solid #333333;\n//   border-radius: 5px;\n//   font-weight: bold;\n//   text-decoration: none;\n//   position: absolute;\n//   top: 10px; /* 모달 창 상단에 위치 */\n//   right: 10px; /* 모달 창 우측에 위치 */\n// `;\n\nconst SmallCloseButton = styled.button`\n  padding: 4px 8px;\n  background-color: #ffffff;\n  color: #333333;\n  border: 2px solid #333333;\n  border-radius: 5px;\n  font-weight: bold;\n  margin-top: 20%; /* 닫기 버튼을 약간 더 내림 */\n  text-decoration: none;\n`;\n\n// const CartButton = styled(Link)`\n//   padding: 8px 20px;\n//   background-color: #ffffff;\n//   margin: 8px;\n//   color: #333333;\n//   border: 2px solid #333333;\n//   border-radius: 5px;\n//   font-weight: bold;\n//   text-decoration: none;\n//   display: block; /* 링크를 블록 요소로 설정하여 중앙 정렬 */\n//   margin: 10 auto; /* 가운데 정렬 */\n// `;\n\nconst SelectedCardModal = ({ show, handleClose, cartItems, totalPrice }) => {\n  return (\n    <>\n      {show && (\n        <ModalBackdrop>\n          <ModalContent>\n            {/* <KaKaoPayment cartItems={cartItems} totalPrice={totalPrice} />\n            <TossPayment cartItems={cartItems} totalPrice={totalPrice} /> */}\n\n            <SmallCloseButton onClick={handleClose}>닫기</SmallCloseButton>\n          </ModalContent>\n        </ModalBackdrop>\n      )}\n    </>\n  );\n};\n\nexport default SelectedCardModal;\n","import { useEffect, useRef, useState } from \"react\";\nimport { loadPaymentWidget } from \"@tosspayments/payment-widget-sdk\";\nimport { nanoid } from \"nanoid\";\n\nconst selector = \"#payment-widget\";\nconst clientKey = \"test_gck_docs_Ovk5rk1EwkEbP0W43n07xlzm\";\nconst customerKey = \"test_sk_AQ92ymxN34YaXB0Jz4EpVajRKXvd\";\n\nexport function CheckoutPage({ cartItems, totalPrice }) {\n  const paymentWidgetRef = useRef(null);\n  const paymentMethodsWidgetRef = useRef(null);\n  const [price, setPrice] = useState(totalPrice);\n\n  useEffect(() => {\n    (async () => {\n      const paymentWidget = await loadPaymentWidget(clientKey, customerKey);\n\n      const paymentMethodsWidget = paymentWidget.renderPaymentMethods(\n        selector,\n        { value: totalPrice },\n        { variantKey: \"DEFAULT\" }\n      );\n\n      paymentWidgetRef.current = paymentWidget;\n      paymentMethodsWidgetRef.current = paymentMethodsWidget;\n    })();\n  }, []);\n\n  useEffect(() => {\n    const paymentMethodsWidget = paymentMethodsWidgetRef.current;\n\n    if (paymentMethodsWidget == null) {\n      return;\n    }\n\n    paymentMethodsWidget.updateAmount(price);\n  }, [price]);\n\n  return (\n    <div>\n      <h1>주문서</h1>\n      <span>{`${price.toLocaleString()}원`}</span>\n\n      <div id=\"payment-widget\" />\n\n      <button\n        onClick={async () => {\n          const paymentWidget = paymentWidgetRef.current;\n\n          try {\n            // ## Q. 결제 요청 후 계속 로딩 중인 화면이 보인다면?\n            // 아직 결제 요청 중이에요. 이어서 요청 결과를 확인한 뒤, 결제 승인 API 호출까지 해야 결제가 완료돼요.\n            // 코드샌드박스 환경에선 요청 결과 페이지(`successUrl`, `failUrl`)로 이동할 수가 없으니 유의하세요.\n            await paymentWidget?.requestPayment({\n              orderId: nanoid(),\n              orderName: \"QR코드 키오스크\",\n              customerName: \"GUEST\",\n              customerEmail: \"NULL\",\n              successUrl: `${window.location.origin}/success`,\n              failUrl: `${window.location.origin}/fail`,\n            });\n          } catch (error) {\n            // handle error\n          }\n        }}\n      >\n        결제하기\n      </button>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Header from \"../cart/Header\";\nimport Footer from \"../cart/Footer\";\nimport CartComponent from \"../cart/CartComponent\";\n\nimport SelectedCardModal from \"../modal/SeletedCardModal\";\nimport { CheckoutPage } from \"../../toss/CheckoutPage\";\n// import handlePayment from \"../button/PaymentButton.js\";\n\nconst Layout = styled.div`\n  position: relative;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst MobileLayout = styled(Layout)`\n  @media (max-width: 768px) {\n    padding-top: 60px;\n    padding-bottom: 60px;\n    height: 100vh;\n  }\n`;\n\nconst CartContent = styled.div`\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 0px 1px;\n`;\n\nconst CartLayout = () => {\n  const [cartItems, setCartItems] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [showCheckout, setShowCheckout] = useState(false);\n\n  useEffect(() => {\n    const storedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    setCartItems(storedCart);\n    calculateTotalPrice(storedCart);\n  }, []);\n\n  const calculateTotalPrice = (items) => {\n    if (!items) return; // 예외 처리 추가\n    let totalPrice = 0;\n    items.forEach((item) => {\n      totalPrice += item.price * item.amount;\n    });\n    setTotalPrice(totalPrice);\n  };\n\n  const handleCartUpdate = (updatedCart) => {\n    setCartItems(updatedCart);\n    calculateTotalPrice(updatedCart);\n  };\n\n  const handleCheckout = () => {\n    setShowCheckout(true);\n  };\n\n  const handleCartContentClick = () => {\n    if (showCheckout) {\n      setShowCheckout(false);\n    }\n  };\n\n  return (\n    <MobileLayout>\n      <Header>장바구니</Header>\n\n      <CartContent>\n        <CartComponent cartItems={cartItems} onUpdate={handleCartUpdate} />\n      </CartContent>\n\n      <Footer>\n        <div>\n          {cartItems.length > 0 && (\n            <p>총 가격: {totalPrice.toLocaleString()}원</p>\n          )}\n        </div>\n\n        {showCheckout ? (\n          <button onClick={() => setShowCheckout(false)}>닫기</button>\n        ) : (\n          <button onClick={handleCheckout}>결제하기</button>\n        )}\n        {showCheckout && (\n          <CheckoutPage cartItems={cartItems} totalPrice={totalPrice} />\n        )}\n        {/* <SelectedCardModal\n          show={showModal}\n          handleClose={() => setShowModal(false)}\n          cartItems={cartItems}\n          totalPrice={totalPrice}\n        /> */}\n      </Footer>\n    </MobileLayout>\n  );\n};\n\nexport default CartLayout;\n","// CartPage.js\nimport React from \"react\";\n\nimport CartLayout from \"../../components/layout/CartLayout\";\n\nconst CartPage = () => {\n  return <CartLayout></CartLayout>;\n};\n\nexport default CartPage;\n"],"names":["HeaderWrapper","styled","header","_templateObject","_taggedTemplateLiteral","HeaderTitle","h1","_templateObject2","BackButton","Link","_templateObject3","Header","_jsxs","children","_jsx","to","IoIosArrowBack","size","footer","CardContainer","div","ProductImage","img","ProductInfo","ProductName","_templateObject4","Price","_templateObject5","Options","_templateObject6","QuantityButtons","_templateObject7","QuantityButton","button","_templateObject8","RemoveButton","_templateObject9","_ref","cartItems","onUpdate","loading","setLoading","useState","useEffect","JSON","parse","localStorage","getItem","length","map","item","index","src","imgUrl","alt","name","onError","e","target","selectedSize","selectedTemperature","price","amount","toLocaleString","onClick","updatedCart","setItem","stringify","handleDecrement","handleIncrement","splice","handleRemoveItem","CheckoutPage","totalPrice","paymentWidgetRef","useRef","paymentMethodsWidgetRef","setPrice","paymentWidget","loadPaymentWidget","paymentMethodsWidget","renderPaymentMethods","value","variantKey","current","updateAmount","concat","id","async","requestPayment","orderId","nanoid","orderName","customerName","customerEmail","successUrl","window","location","origin","failUrl","error","Layout","MobileLayout","CartContent","CartLayout","setCartItems","setTotalPrice","showCheckout","setShowCheckout","storedCart","calculateTotalPrice","items","forEach","CartComponent","Footer","handleCheckout","CartPage"],"sourceRoot":""}